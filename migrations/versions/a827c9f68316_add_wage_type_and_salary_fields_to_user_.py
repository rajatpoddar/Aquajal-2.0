"""Add wage_type and salary fields to User model

Revision ID: a827c9f68316
Revises: 017dc3402d21
Create Date: 2024-05-17 12:00:00.000000 

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a827c9f68316'
down_revision = '017dc3402d21'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # NOTE: This migration has been manually edited.
    # The production server already had 'monthly_salary' from a
    # previous failed migration, but was missing 'wage_type'.
    # We are only adding the columns that are confirmed to be missing.
    
    with op.batch_alter_table('user', schema=None) as batch_op:
        try:
            # Try to add wage_type with a server_default for existing rows
            batch_op.add_column(sa.Column('wage_type', sa.String(length=10), nullable=False, server_default='daily'))
        except Exception as e:
            print(f"Could not add column 'wage_type': {e}")
            # This will likely fail on SQLite if it already exists, but will
            # run on Postgres if it doesn't. We'll let the monthly_salary check handle the next step.

        try:
            # Try to add monthly_salary
            batch_op.add_column(sa.Column('monthly_salary', sa.Float(), nullable=True))
        except Exception as e:
            print(f"Could not add column 'monthly_salary': {e}")
            # This is expected to fail on your server, which is OK.
            pass
            
    # Set the server_default to NULL after adding data, for new rows
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('wage_type', server_default=None)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # Full downgrade to remove what this migration was
        # *supposed* to add, even if it failed.
        try:
            batch_op.drop_column('monthly_salary')
        except Exception as e:
            print(f"Could not drop column 'monthly_salary': {e}")
        try:
            batch_op.drop_column('wage_type')
        except Exception as e:
            print(f"Could not drop column 'wage_type': {e}")

    # ### end Alembic commands ###