"""Add wage_type and salary fields to User model

Revision ID: a827c9f68316
Revises: 017dc3402d21
"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a827c9f68316'
down_revision = '017dc3402d21'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Manually edited to handle inconsistent prod database
    # We know 'wage_type' is missing (from app crash log)
    # We know 'monthly_salary' may already exist (from previous deploy log)
    
    with op.batch_alter_table('user', schema=None) as batch_op:
        try:
            # This is the column the app is crashing on.
            # We add it with a server_default so existing rows aren't NULL.
            batch_op.add_column(sa.Column('wage_type', sa.String(length=10), nullable=False, server_default='daily'))
            print("Successfully added 'wage_type' column.")
        except Exception as e:
            print(f"Skipping 'wage_type' (already exists?): {e}")
            pass # Column might already exist, which is fine

        try:
            # This column already exists on prod, this will likely fail but be caught
            batch_op.add_column(sa.Column('monthly_salary', sa.Float(), nullable=True))
            print("Successfully added 'monthly_salary' column.")
        except Exception as e:
            print(f"Skipping 'monthly_salary' (already exists?): {e}")
            pass # Column already exists, which is fine
            
    # Set the server_default back to NULL after the data is populated
    try:
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.alter_column('wage_type', server_default=None)
    except Exception as e:
         print(f"Could not alter 'wage_type' server_default: {e}")
         pass
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # Full downgrade to remove what this migration was
        # *supposed* to add, even if it failed.
        try:
            batch_op.drop_column('monthly_salary')
        except Exception as e:
            print(f"Could not drop 'monthly_salary': {e}")
        try:
            batch_op.drop_column('wage_type')
        except Exception as e:
            print(f"Could not drop 'wage_type': {e}")
    # ### end Alembic commands ###
